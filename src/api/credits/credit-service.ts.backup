import { createId } from "@paralleldrive/cuid2";
import { and, eq, sql } from "drizzle-orm";

import { db } from "~/db";
import {
  creditConsumptionConfigTable,
  creditPackageTable,
  creditRechargeTable,
  creditTransactionTable,
  userCreditBalanceTable,
} from "~/db/schema";
import { stripe } from "~/lib/stripe";

/**
 * 添加奖励积分
 * @param userId 用户ID
 * @param amount 积分数量
 * @param reason 奖励原因
 * @param metadata 元数据 * @returns 奖励结果
 */
export async function addBonusCredits(
  userId: string,
  amount: number,
  reason: string,
  metadata: Record<string, any> = {},
) {
  console.log(`[addBonusCredits] 开始为用户 ${userId} 添加 ${amount} 积分，原因: ${reason}`);
  
  if (amount <= 0) {
    const error = "奖励积分必须大于0";
    console.error(`[addBonusCredits] 错误: ${error}`);
    throw new Error(error);
  }

  try {
    // 使用数据库事务确保数据一致性
    const result = await db.transaction(async (tx) => {
      console.log(`[addBonusCredits] 开始数据库事务`);
      
      // 1. 获取或创建用户积分余额
      let userBalance = await tx.query.userCreditBalanceTable.findFirst({
        where: eq(userCreditBalanceTable.userId, userId),
      });

      if (!userBalance) {
        console.log(`[addBonusCredits] 用户 ${userId} 积分余额不存在，正在创建`);
        const newBalanceResult = await tx
          .insert(userCreditBalanceTable)
          .values({
            balance: 0,
            createdAt: new Date(),
            id: createId(),
            totalConsumed: 0,
            totalRecharged: 0,
            updatedAt: new Date(),
            userId,
          })
          .returning();
        
        userBalance = newBalanceResult[0];
        console.log(`[addBonusCredits] 创建用户积分余额成功: ${userBalance.id}`);
      }

      // 2. 计算新余额
      const newBalance = userBalance.balance + amount;
      console.log(`[addBonusCredits] 积分余额更新: ${userBalance.balance} -> ${newBalance}`);

      // 3. 更新用户积分余额
      await tx
        .update(userCreditBalanceTable)
        .set({
          balance: newBalance,
          updatedAt: new Date(),
        })
        .where(eq(userCreditBalanceTable.id, userBalance.id));
      
      console.log(`[addBonusCredits] 积分余额更新成功`);

      // 4. 创建积分交易记录
      const transactionId = createId();
      await tx.insert(creditTransactionTable).values({
        amount,
        balanceAfter: newBalance,
        createdAt: new Date(),
        description: reason,
        id: transactionId,
        metadata: JSON.stringify(metadata),
        type: "bonus",
        userId,
      });
      
      console.log(`[addBonusCredits] 积分交易记录创建成功: ${transactionId}`);

      return {
        added: amount,
        balance: newBalance,
        success: true,
        transactionId,
      };
    });

    console.log(`[addBonusCredits] 成功为用户 ${userId} 添加 ${amount} 积分，新余额: ${result.balance}`);
    return result;

  } catch (error) {
    console.error(`[addBonusCredits] 添加奖励积分失败 - 用户: ${userId}, 积分: ${amount}`, error);
    
    // 记录详细的错误信息
    if (error instanceof Error) {
      console.error(`[addBonusCredits] 错误详情: ${error.message}`);
      console.error(`[addBonusCredits] 错误堆栈: ${error.stack}`);
    }
    
    throw new Error(`添加奖励积分失败: ${error instanceof Error ? error.message : '未知错误'}`);
  }
}

/**
 * 消费积分
 * @param userId 用户ID
 * @param actionType 操作类型
 * @param uploadId 上传ID（可选）
 * @param description 描述（可选）
 * @returns 消费结果
 */
async function consumeCredits(
  userId: string,
  actionType: string,
  uploadId?: string,
  description?: string,
) {
  // 获取操作所需积分
  const config = await getCreditConsumptionConfig(actionType);
  // 如果未找到配置，则默认为1，并发出警告
  let creditsRequired = 1;
  if (!config) {
    console.warn(`未找到操作类型"${actionType}" 的积分配置，将默认使用1个积分。`);
  } else {
    creditsRequired = config.creditsRequired;
  }

  // 获取用户积分余额
  const userBalance = await getUserCreditBalance(userId);

  // 检查积分是否足够
  if (userBalance.balance < creditsRequired) {
    return {
      balance: userBalance.balance,
      message: "积分不足",
      required: creditsRequired,
      success: false,
    };
  }

  // 开始数据库事务
  // 注意：这里使用了简化的事务处理，实际项目中应该使用数据库事务
  try {
    // 1. 更新用户积分余额
    const newBalance = userBalance.balance - creditsRequired;
    const newTotalConsumed = userBalance.totalConsumed + creditsRequired;

    await db
      .update(userCreditBalanceTable)
      .set({
        balance: newBalance,
        totalConsumed: newTotalConsumed,
        updatedAt: new Date(),
      })
      .where(eq(userCreditBalanceTable.id, userBalance.id));

    // 2. 创建积分交易记录
    const transactionDescription =
      description || `${actionType} 消费${creditsRequired}积分`;

    await db.insert(creditTransactionTable).values({
      amount: -creditsRequired, // 负数表示消费
      balanceAfter: newBalance,
      createdAt: new Date(),
      description: transactionDescription,
      id: createId(),
      metadata: JSON.stringify({
        actionType,
        uploadId,
      }),
      relatedUploadId: uploadId,
      type: "consumption",
      userId,
    });

    return {
      balance: newBalance,
      consumed: creditsRequired,
      success: true,
    };
  } catch (error) {
    console.error("消费积分失败:", error);
    throw error;
  }
}

/**
 * 创建积分充值记录和支付意图
 * @param userId 用户ID
 * @param packageId 套餐ID
 * @returns 客户端密钥和充值记录
 */
export async function createCreditRecharge(userId: string, packageId: string) {
  console.log(`[createCreditRecharge] 开始创建积分充值: 用户=${userId}, 套餐=${packageId}`);

  // 获取套餐信息
  const creditPackage = await db.query.creditPackageTable.findFirst({
    where: and(
      eq(creditPackageTable.id, packageId),
      eq(creditPackageTable.isActive, 1),
    ),
  });

  if (!creditPackage) {
    throw new Error("积分套餐不存在或已停用");
  }

  console.log(`[createCreditRecharge] 找到套餐: ${creditPackage.name}, 积分: ${creditPackage.credits}, 价格: ${creditPackage.price}`);

  // 创建充值记录
  const rechargeId = createId();
  const recharge = await db
    .insert(creditRechargeTable)
    .values({
      amount: creditPackage.credits,
      createdAt: new Date(),
      currency: creditPackage.currency,
      id: rechargeId,
      price: creditPackage.price,
      status: "pending",
      updatedAt: new Date(),
      userId,
    })
    .returning();

  console.log(`[createCreditRecharge] 创建充值记录: ${rechargeId}`);

  // 创建 Stripe PaymentIntent
  const paymentIntent = await stripe.paymentIntents.create({
    amount: creditPackage.price,
    currency: creditPackage.currency,
    metadata: {
      credits: creditPackage.credits.toString(),
      packageId,
      rechargeId,
      type: "credit_recharge",
      userId,
    },
  });

  console.log(`[createCreditRecharge] 创建支付意图: ${paymentIntent.id}`);

  // 更新充值记录的 PaymentIntent ID
  await db
    .update(creditRechargeTable)
    .set({
      paymentIntentId: paymentIntent.id,
      updatedAt: new Date(),
    })
    .where(eq(creditRechargeTable.id, rechargeId));

  console.log(`[createCreditRecharge] 完成积分充值创建`);

  return {
    clientSecret: paymentIntent.client_secret,
    recharge: recharge[0],
  };
}

/**
 * 获取积分消费配置
 * @param actionType 操作类型
 * @returns 配置信息
 */
export async function getCreditConsumptionConfig(actionType: string) {
  return await db.query.creditConsumptionConfigTable.findFirst({
    where: and(
      eq(creditConsumptionConfigTable.actionType, actionType),
      eq(creditConsumptionConfigTable.isActive, 1),
    ),
  });
}

/**
 * 获取积分套餐列表
 * @returns 套餐列表
 */
async function getCreditPackages() {
  return await db.query.creditPackageTable.findMany({
    where: eq(creditPackageTable.isActive, 1),
    orderBy: [creditPackageTable.sortOrder, creditPackageTable.price],
  });
}

/**
 * 获取用户积分余额
 * @param userId 用户ID
 * @returns 用户积分余额
 */
export async function getUserCreditBalance(userId: string) {
  let userBalance = await db.query.userCreditBalanceTable.findFirst({
    where: eq(userCreditBalanceTable.userId, userId),
  });

  // 如果用户没有积分记录，则创建一个
  if (!userBalance) {
    const newBalance = await db
      .insert(userCreditBalanceTable)
      .values({
        balance: 0,
        createdAt: new Date(),
        id: createId(),
        totalConsumed: 0,
        totalRecharged: 0,
        updatedAt: new Date(),
        userId,
      })
      .returning();

    userBalance = newBalance[0];
  }

  return userBalance;
}

/**
 * 获取用户充值记录
 * @param userId 用户ID
 * @param limit 限制数量
 * @param offset 偏移量
 * @returns 充值记录列表
 */
async function getUserCreditRecharges(
  userId: string,
  limit = 10,
  offset = 0,
) {
  return await db.query.creditRechargeTable.findMany({
    where: eq(creditRechargeTable.userId, userId),
    limit,
    offset,
    orderBy: [creditRechargeTable.createdAt],
  });
}

/**
 * 获取用户交易记录
 * @param userId 用户ID
 * @param limit 限制数量
 * @param offset 偏移量
 * @returns 交易记录列表
 */
async function getUserCreditTransactions(
  userId: string,
  limit = 10,
  offset = 0,
) {
  return await db.query.creditTransactionTable.findMany({
    where: eq(creditTransactionTable.userId, userId),
    limit,
    offset,
    orderBy: [creditTransactionTable.createdAt],
  });
}

/**
 * 处理积分充值成功
 * @param rechargeId 充值记录ID
 * @param paymentIntentId 支付意图ID
 * @returns 处理结果
 */
export async function handleCreditRechargeSuccess(
  rechargeId: string,
  paymentIntentId: string,
) {
  console.log(`[handleCreditRechargeSuccess] 开始处理积分充值成功: ${rechargeId}`);

  // 获取充值记录
  const recharge = await db.query.creditRechargeTable.findFirst({
    where: and(
      eq(creditRechargeTable.id, rechargeId),
      eq(creditRechargeTable.paymentIntentId, paymentIntentId),
    ),
  });

  if (!recharge) {
    throw new Error("充值记录不存在");
  }

  // 检查是否已经处理过
  if (recharge.status === "completed") {
    console.log(`[handleCreditRechargeSuccess] 充值记录已处理过: ${rechargeId}`);
    return recharge;
  }

  console.log(`[handleCreditRechargeSuccess] 处理充值: 用户=${recharge.userId}, 积分=${recharge.amount}`);

  // 更新充值记录状态
  await db
    .update(creditRechargeTable)
    .set({
      status: "completed",
      updatedAt: new Date(),
    })
    .where(eq(creditRechargeTable.id, rechargeId));

  // 获取用户当前积分余额
  const userBalance = await getUserCreditBalance(recharge.userId);

  // 更新用户积分余额
  const newBalance = userBalance.balance + recharge.amount;
  const newTotalRecharged = userBalance.totalRecharged + recharge.amount;

  await db
    .update(userCreditBalanceTable)
    .set({
      balance: newBalance,
      totalRecharged: newTotalRecharged,
      updatedAt: new Date(),
    })
    .where(eq(userCreditBalanceTable.id, userBalance.id));

  // 创建积分交易记录
  await db.insert(creditTransactionTable).values({
    amount: recharge.amount,
    balanceAfter: newBalance,
    createdAt: new Date(),
    description: `充值${recharge.amount}积分`,
    id: createId(),
    metadata: JSON.stringify({
      currency: recharge.currency,
      paymentIntentId,
      price: recharge.price,
      rechargeId,
    }),
    relatedRechargeId: rechargeId,
    type: "recharge",
    userId: recharge.userId,
  });

  console.log(`[handleCreditRechargeSuccess] 积分充值处理完成: 新余额=${newBalance}`);

  return recharge;
} 